// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  name        String
  email       String   @unique
  password    String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime @default(now())

  walletAddress String?

  sentFriendRequests     Friendship[] @relation("SentFriendRequests")
  receivedFriendRequests Friendship[] @relation("ReceivedFriendRequests")

  Rooms       Room[]        @relation("UserRooms")
  ChatMessage ChatMessage[]
}

model Friendship {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  status FriendshipStatus @default(PENDING)

  senderId String
  sender   User   @relation("SentFriendRequests", fields: [senderId], references: [id])

  receiverId String
  receiver   User   @relation("ReceivedFriendRequests", fields: [receiverId], references: [id])

  chatMessages  ChatMessage[]
}

model Room {
  id      String  @id @default(cuid())
  name    String
  users   User[]  @relation("UserRooms")
  private Boolean

  chatMessage ChatMessage[]
}

model ChatMessage {
  id          String      @id @default(cuid())
  message     String
  createdAt   DateTime    @default(now())

  senderId    String
  sender      User        @relation(fields: [senderId], references: [id])

  roomId      String?
  room        Room?       @relation(fields: [roomId], references: [id])

  friendshipId  String?
  friendship  Friendship?   @relation(fields: [friendshipId], references: [id])
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  REJECTED
  BLOCKED
}

enum MessageType {
  MESSAGE
  PAYMENT
  LOCATION
  FRIEND_REQUEST
  JOIN_NEW_GROUP
  LEAVE_GROUP
}
